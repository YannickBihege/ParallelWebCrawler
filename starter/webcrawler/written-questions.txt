Udacity Parallel Webcrawler


Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

$ java -classpath target/udacity-webcrawler-1.0.jar     com.udacity.webcrawler.main.WebCrawlerMain     src/main/config/written_question_1a.json
{"wordCounts":{"data":273,"learning":152,"udacity":149,"with":127,"program":121},"urlsVisited":9}yann@ubuntu:~/Documents/Javaprog_nd/ParallelWebCrawler/starter/webcrawler$


$ java -classpath target/udacity-webcrawler-1.0.jar     com.udacity.webcrawler.main.WebCrawlerMain     src/main/config/written_question_1b.json
{"wordCounts":{},"urlsVisited":0}


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)
An old hardware will need more resources and therefore more time in order to define the threads-

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?
If we increase the maximal depth of the search. The parallel version should outperform the sequential one.
The parallel crawler is slower due to the extra overhead from creating the thread pools and workers.
The parallel crawler should run faster on any computer with more than one available processor (or CPU core).

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
Performance topics are addressed.

The code addressing the cross-cutting concern must be scattered, or duplicated, across the various related locations, resulting in a loss of modularity.

    (b) What are the join points of the Profiler in the web crawler program?

The profile annotated methods.

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.
Proxy
gives Can improve the API for object creation when the class being instantiated has a lot pf parameters.
add a layer of security to the original underlying
- ProfilerImpl
What I like is that we can use a proxy as a layer to protect classes and objects.
What I dislike : it can increase the amount of code and the complexity when it is not necessary.

Builder
Can improve the API for object creation when the class being instantiated has a lot pf parameters.
The configuration CrawlerConfiguration is based on the builder pattern.
What I dislike
* The builder pattern makes the code less likely to be understood at first glance even if it increased the readability of the code.
What I like
It can help to reduce the number of parameters or the size of the method signature.

Dependency injection
Object creation. The framework does the work for object creation,
- webcrawler main
What I dislike
I do not like dependency injection because it hides the complexity and the logic hidden behind an annotation.
What I like
It certainly increase the readability.


##
Run at Sun, 10 Apr 2022 19:38:22 GMT
com.udacity.webcrawler.ParallelWebCrawler#crawl took 0m 1s 390ms
com.udacity.webcrawler.parser.PageParserImpl#parse took 0m 2s 971ms
